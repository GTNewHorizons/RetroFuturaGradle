/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.gtnewhorizons.retrofuturagradle;

import static org.junit.jupiter.api.Assertions.*;

import org.gradle.api.Project;
import org.gradle.api.Task;
import org.gradle.testfixtures.ProjectBuilder;
import org.junit.jupiter.api.Test;

import com.gtnewhorizons.retrofuturagradle.modutils.ModUtils;

/**
 * A simple unit test for the RetroFuturaGradle plugin.
 */
class UserDevPluginTest {

    @Test
    void pluginRegistersTasks() {
        // Create a test project and apply the plugin
        Project project = ProjectBuilder.builder().build();
        project.getPlugins().apply("com.gtnewhorizons.retrofuturagradle");

        // Verify important targets
        assertNotNull(project.getTasks().findByName("downloadAssetManifest"));
        assertNotNull(project.getTasks().findByName("cleanVanillaAssets"));
        assertNotNull(project.getTasks().findByName("downloadVanillaAssets"));
        assertNotNull(project.getTasks().findByName("downloadVanillaJars"));
        assertNotNull(project.getTasks().findByName("runVanillaClient"));
        assertNotNull(project.getTasks().findByName("runVanillaServer"));

        assertNotNull(project.getTasks().findByName("downloadFernflower"));
        assertNotNull(project.getTasks().findByName("mergeVanillaSidedJars"));
        assertNotNull(project.getTasks().findByName("deobfuscateMergedJarToSrg"));
        assertNotNull(project.getTasks().findByName("decompileSrgJar"));
        assertNotNull(project.getTasks().findByName("patchDecompiledJar"));
        assertNotNull(project.getTasks().findByName("remapDecompiledJar"));
        assertNotNull(project.getTasks().findByName("decompressDecompiledSources"));
        assertNotNull(project.getTasks().findByName("compilePatchedMcJava"));
        assertNotNull(project.getTasks().findByName("packagePatchedMc"));
    }

    @Test
    void allTasksInitSuccessfully() {
        Project project = ProjectBuilder.builder().build();
        project.getPlugins().apply("com.gtnewhorizons.retrofuturagradle");
        for (String taskName : project.getTasks().getNames()) {
            project.getLogger().info("Task found: " + taskName);
            Task t = assertDoesNotThrow(
                    () -> project.getTasks().findByName(taskName),
                    taskName + " could not be created");
        }
    }

    @Test
    void liveMirror() {
        Project project = ProjectBuilder.builder().build();
        project.getPlugins().apply("com.gtnewhorizons.retrofuturagradle");
        ModUtils modUtils = project.getExtensions().getByType(ModUtils.class);
        assertNotNull(modUtils);
        assertNotNull(
                modUtils.getLiveMirrorURL(10000, "https://example.com", "https://www.iana.org/help/example-domains"));
    }
}
